* API en Python
Afin de faire des requêtes sur une API REST, il y a une super
bibliothèque : "requests".

** Documentation :
https://requests.readthedocs.io/en/master/

** Installation :
 De mon coté je n'ai rien eu à faire sous Pop_os 18.04.

** Bac à sable
#+begin_src ipython :session api :file  :exports code
import requests
#+end_src

#+RESULTS:
: # Out[43]:

Afin de me faire la main, je vais utiliser une API ouverte :
http://open-notify.org/ qui met à disposition une partie des données
de la NASA.

Cette API, comme toutes les APIs mettent à disposition des URLs
permettant d'accéder à des données spécifiques. J'ai trouvé une URL
permettant de récupérer la liste des astronautes actuellement dans
l'espace :
http://api.open-notify.org/astros.json

Ici, on effectue la requête et on récupère la réponse.
#+begin_src ipython :session api :file  :exports both :results output
r = requests.get("http://api.open-notify.org/astros.json")
print(type(r))
#+end_src

#+RESULTS:
: <class 'requests.models.Response'>

Très bien, mais qu'en fait-on ?

On peut déjà commencer par vérifier le code de statut.

#+begin_src ipython :session api :file  :exports both :results output
print(r.status_code)
#+end_src

#+RESULTS:
: 200

#+caption: codes de statuts
| Category           | Description                                                                                           |
|--------------------+-------------------------------------------------------------------------------------------------------|
| 1xx: Informational | Communicates transfer protocol-level information.                                                     |
| 2xx: Success       | 	Indicates that the client’s request was accepted successfully.                                |
| 3xx: Redirection   | 	Indicates that the client must take some additional action in order to complete their request. |
| 4xx: Client Error  | 	This category of error status codes points the finger at clients.                             |
| 5xx: Server Error  | The server takes responsibility for these error status codes.                                           |

Exploitation des données récupérées :

Le contenu de la réponse est une chaîne de caractères non encodée.  La
méthode '.json()' permet de récupérer un dictionnaire python, qui sera
par la suite facilement exploitable. Ici on ne fait que l'afficher.
#+begin_src ipython :session api :file  :exports both :results output
import pprint
pprint.pprint(r.json())
#+end_src

#+RESULTS:
: {'message': 'success',
:  'number': 3,
:  'people': [{'craft': 'ISS', 'name': 'Chris Cassidy'},
:             {'craft': 'ISS', 'name': 'Anatoly Ivanishin'},
:             {'craft': 'ISS', 'name': 'Ivan Vagner'}]}

Plus compliqué, une requête avec des paramètres. Toujours sur
open-notify, on trouve une adresse permettant de récupérer les
prochaines dates de passages de l'ISS au dessus d'un couple de
coordonnées (LAT, LON). Le code ci dessous permet d'obtenir
l'équivalent de cette requête :
http://api.open-notify.org/iss-pass.json?lat=40.71&lon=-74

Le passage de paramètres est ainsi simplifié en utilisant un
dictionnaire python.
#+begin_src ipython :session api :file  :exports both :results output
parameters = {"lat": 48.684426, "lon": 6.171111}
r = requests.get("http://api.open-notify.org/iss-pass.json", params=parameters)
pprint.pprint(r.json())
#+end_src

#+RESULTS:
#+begin_example
{'message': 'success',
 'request': {'altitude': 100,
             'datetime': 1587598611,
             'latitude': 48.684426,
             'longitude': 6.171111,
             'passes': 5},
 'response': [{'duration': 544, 'risetime': 1587617490},
              {'duration': 651, 'risetime': 1587623210},
              {'duration': 652, 'risetime': 1587629021},
              {'duration': 654, 'risetime': 1587634845},
              {'duration': 642, 'risetime': 1587640656}]}
#+end_example

Conversion des timestamps en dates humainement compréhensibles :
#+begin_src ipython :session api :file  :exports both
from datetime import datetime
data = r.json()
dates = [str(datetime.fromtimestamp(d['risetime'])) for d in data['response']]
dates
#+end_src

#+RESULTS:
: # Out[36]:
: #+BEGIN_EXAMPLE
:   ['2020-04-23 06:51:30',
:   '2020-04-23 08:26:50',
:   '2020-04-23 10:03:41',
:   '2020-04-23 11:40:45',
:   '2020-04-23 13:17:36']
: #+END_EXAMPLE
